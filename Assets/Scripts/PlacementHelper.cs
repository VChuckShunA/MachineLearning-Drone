using System.Collections;
using System.Collections.Generic;
using UnityEngine;


/// <summary>
/// This script is used to decide which direction 
/// to rotate road prefabs when placing them along the path generated by the L System
/// </summary>
public static class PlacementHelper {
	/// <summary>
	/// Finds the Neighbour of a given position
	/// </summary>
	/// <param name="position"></param>
	/// <param name="collection"></param>
	/// <returns></returns>
	public static List<Direction> FindNeighbour(Vector3Int position, ICollection<Vector3Int> collection) {
		List<Direction> neighbourDirections = new List<Direction>();
		if (collection.Contains(position + Vector3Int.right)) {
			neighbourDirections.Add(Direction.Right);
		}
		if (collection.Contains(position - Vector3Int.right)) {
			neighbourDirections.Add(Direction.Left);
		}
		if (collection.Contains(position + new Vector3Int(0, 0, 1))) {
			neighbourDirections.Add(Direction.Up);
		}
		if (collection.Contains(position - new Vector3Int(0, 0, 1))) {
			neighbourDirections.Add(Direction.Down);
		}
		return neighbourDirections;
	}

	/// <summary>
	/// Returns an Offset from a Direction
	/// </summary>
	/// <param name="direction"></param>
	/// <returns></returns>
	/// <exception cref="System.Exception"></exception>
	internal static Vector3Int GetOffsetFromDirection(Direction direction) {
		switch (direction) {
			case Direction.Up:
				return new Vector3Int(0, 0, 1);
			case Direction.Down:
				return new Vector3Int(0, 0, -1);
			case Direction.Left:
				return Vector3Int.left;
			case Direction.Right:
				return Vector3Int.right;
			default:
				break;
		}
		throw new System.Exception("No direction such as" + direction);
	}

	/// <summary>
	/// Returns a reverse direction
	/// </summary>
	/// <param name="direction"></param>
	/// <returns></returns>
	/// <exception cref="System.Exception"></exception>
	public static Direction GetReverseDirection(Direction direction) {
		switch (direction) {
			case Direction.Up:
				return Direction.Down;
			case Direction.Down:
				return Direction.Up;
			case Direction.Left:
				return Direction.Right;
			case Direction.Right:
				return Direction.Left;
			default:
				break;
		}
		throw new System.Exception("No direction such as" + direction);
	}
}
